const source = [
'...s..............................................',
'...................w......K.......t...............',
'........s.........................................',
'.......s......w...............1...................',
'.........w5.......................................',
'.......................t.F........................',
'..................................................',
'F................................1...........d....',
'.........................5......................K.',
'............5.................R..............KZ...',
'....F.....q.........w..............1.....t........',
'............8.......I.............................',
'..........8.................t....................K',
'...........8.................5.....Z..............',
'.........q..............................Z...d..U..',
'...................Y.q...R........................',
'....................E.....z...............y.......',
'..........................................U.......',
'.....F.................................k........S.',
'............q...................d.................',
'.................................R................',
'..x....................................U.........y',
'.......x.........................E..M...U..d......',
'......z.......X............................4......',
'...............I....m....M......R............y....',
'.......z...................................k..e...',
'..f..z.......................................e....',
'...f.I..........7..u..........M................D..',
'.......X..I.......x.................k.............',
'.........X.......7....................4.......S...',
'....................u9...T.....3.Z....o..........6',
'........f.......D..3....u..................S......',
'...W...0.........................................D',
'.....................T................E.......m...',
'...8....Y............f........T4..................',
'......Y...........................................',
'....0.............3...............................',
'....................3.T.....................k.....',
'.......................u..............6...........',
'...........................6..........9........e..',
'..................4....7.............o..........D.',
'.................................M...E..o.........',
'...i.................O...........................Q',
'.....0.i.....................................m.2..',
'.......Y.r........7..............S..O..2.......m..',
'.....r......0.............O.......................',
'..................................Q...............',
'........................6................o......Q.',
'..W...r.................................9.........',
'.W.........................O........2.............',
]
// const source = [
// '............',
// '........0...',
// '.....0......',
// '.......0....',
// '....0.......',
// '......A.....',
// '............',
// '............',
// '........A...',
// '.........A..',
// '............',
// '............',
// ];
console.time('run:')
const map = source.map(a => a.split(''));


const height = map.length;
const width = map[0].length;


const getAntennas = () => {
  const antennas = {};
  map.forEach((row, x) => {
    row.forEach((val, y) => {
      if(val !== '.') {
        antennas[val] = antennas[val] || [];
        antennas[val].push([x, y]);
      }
    });
  });
  return antennas;
}

const onlyUnique = (value, index, self) => {
  return self.indexOf(value) === index;
}


const antennas = getAntennas();

console.log(antennas);

let antinodes = [];

const addAntinode = (point1, point2) => {
  const x = point1[0] + point1[0] - point2[0];
  const y = point1[1] + point1[1] - point2[1];
  if(x >= 0 && x < height && y >= 0 && y < width) {
    return x+','+y;
  }
  return null
}

for(let antena in antennas) {
  antennas[antena].forEach(position => {
    for(let i=0; i < height; i++) {
      for(let j=0; j < width; j++) {
        if(map[i][j] === antena && i !== position[0] && j !== position[1]) {
          const validPoint = addAntinode(position, [i, j]);
          if(validPoint && antinodes.indexOf(validPoint) === -1) {
            antinodes.push(validPoint);
          }
        }
      }
    }
  });
}



map.forEach((line, k) => {
  let row = "";
  line.forEach((val, o)=> {
    let isAntinode  = false;
    antinodes.forEach(point => {
      const p = point.split(',');
      if(parseInt(p[0]) === k && parseInt(p[1]) === o) {
        isAntinode = true;
      }
    })
    row+=isAntinode ? '#' : val;
  })
  console.log(row)
})



antinodes = antinodes.filter(onlyUnique)
console.log(antinodes);
console.log(antinodes.length);
console.timeEnd('run:')